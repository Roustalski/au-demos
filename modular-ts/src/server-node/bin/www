#!/usr/bin/env node

//Enable ES6 syntax/features
"use strict";

// ----------------------------------------
//
//  Module Dependencies
//
// ----------------------------------------
var debug = require("debug")("au-demos-modular:server");
let http = require("http");


// ----------------------------------------
//
//  Internal Properties
//
// ----------------------------------------
// ----------------------------------
//  Port
// ----------------------------------
/**
 * HTTP port or named pipe the server will be running on.
 */
let port = normalizePort(process.env.PORT || "8080");

function normalizePort(val) {
    let port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

// ----------------------------------
//  App
// ----------------------------------
/**
 * Node server application
 */
let app = require("../app");
app.set("port", port);


// ----------------------------------
//  Server
// ----------------------------------
let server = http.createServer(app);
server.listen(port);

server.on("listening", () => {
    let srvr = server.address();
    let addr = typeof srvr === "string" ? `pipe://${srvr}` : srvr.address;
    var spec = addr === "::" ? `http://localhost:${srvr.port}` : addr;
    debug(`Server running at ${spec}`);
});

server.on("error", error => {
    if (error.syscall !== "listen") {
        throw error;
    }

    let bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case "EACCES":
            console.error(`${bind} requires elevated privileges`);
            process.exit(1);
            break;
        case "EADDRINUSE":
            console.error(`${bind} is already in use`);
            process.exit(1);
            break;
        default:
            throw error;
    }
});