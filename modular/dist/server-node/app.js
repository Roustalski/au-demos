System.register([], function (_export) {
  "use strict";

  var express, path, favicon, logger, session, cookieParser, bodyParser, CLIENT_PATH, VIEW_PATH, app;
  return {
    setters: [],
    execute: function () {
      express = require('express');
      path = require('path');
      favicon = require('serve-favicon');
      logger = require('morgan');
      session = require("express-session");
      cookieParser = require('cookie-parser');
      bodyParser = require('body-parser');
      CLIENT_PATH = path.join(__dirname, "..", "client");
      VIEW_PATH = path.join(__dirname, "views");
      app = express();

      app.set('views', VIEW_PATH);
      app.set('view engine', 'hbs');

      logger.token("user-info", function (request) {
        if (!request.user) return "[Anonymous] - ";
        return request.user.name + ' - ' + request.user.email + ' - ';
      });

      app.use(logger(':user-info :remote-addr - :remote-user [:date[clf]] ":method :url HTTP/:http-version" :status :res[content-length] ":referrer" ":user-agent"'));

      app.use(bodyParser.json());
      app.use(bodyParser.urlencoded({ extended: false }));

      app.use(cookieParser());

      app.use(session({
        secret: "[your-secret-here]"
      }));

      require("./config/routes")(express['static'](CLIENT_PATH), app);

      module.exports = app;
    }
  };
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNlcnZlci1ub2RlL2FwcC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsY0FBWSxDQUFDOztNQU9ULE9BQU8sRUFDUCxJQUFJLEVBQ0osT0FBTyxFQUNQLE1BQU0sRUFDTixPQUFPLEVBQ1AsWUFBWSxFQUNaLFVBQVUsRUFPUixXQUFXLEVBQ1gsU0FBUyxFQXNCWCxHQUFHOzs7O0FBcENILGFBQU8sR0FBRyxPQUFPLENBQUMsU0FBUyxDQUFDO0FBQzVCLFVBQUksR0FBRyxPQUFPLENBQUMsTUFBTSxDQUFDO0FBQ3RCLGFBQU8sR0FBRyxPQUFPLENBQUMsZUFBZSxDQUFDO0FBQ2xDLFlBQU0sR0FBRyxPQUFPLENBQUMsUUFBUSxDQUFDO0FBQzFCLGFBQU8sR0FBRyxPQUFPLENBQUMsaUJBQWlCLENBQUM7QUFDcEMsa0JBQVksR0FBRyxPQUFPLENBQUMsZUFBZSxDQUFDO0FBQ3ZDLGdCQUFVLEdBQUcsT0FBTyxDQUFDLGFBQWEsQ0FBQztBQU9qQyxpQkFBVyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLElBQUksRUFBRSxRQUFRLENBQUM7QUFDbEQsZUFBUyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLE9BQU8sQ0FBQztBQXNCM0MsU0FBRyxHQUFHLE9BQU8sRUFBRTs7QUFLbkIsU0FBRyxDQUFDLEdBQUcsQ0FBQyxPQUFPLEVBQUUsU0FBUyxDQUFDLENBQUM7QUFDNUIsU0FBRyxDQUFDLEdBQUcsQ0FBQyxhQUFhLEVBQUUsS0FBSyxDQUFDLENBQUM7O0FBTTlCLFlBQU0sQ0FBQyxLQUFLLENBQUMsV0FBVyxFQUFFLFVBQUEsT0FBTyxFQUFJO0FBRWpDLFlBQUssQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFHLE9BQU8sZ0JBQWdCLENBQUM7QUFDN0MsZUFBVSxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksV0FBTSxPQUFPLENBQUMsSUFBSSxDQUFDLEtBQUssU0FBTTtPQUM1RCxDQUFDLENBQUM7O0FBRUgsU0FBRyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsOElBQThJLENBQUMsQ0FBQyxDQUFDOztBQU1oSyxTQUFHLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDO0FBQzNCLFNBQUcsQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLFVBQVUsQ0FBQyxFQUFFLFFBQVEsRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUFDLENBQUM7O0FBS3BELFNBQUcsQ0FBQyxHQUFHLENBQUMsWUFBWSxFQUFFLENBQUMsQ0FBQzs7QUFNeEIsU0FBRyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUM7QUFDWixjQUFNLEVBQUUsb0JBQW9CO09BSy9CLENBQUMsQ0FBQyxDQUFDOztBQU9KLGFBQU8sQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLE9BQU8sVUFBTyxDQUFDLFdBQVcsQ0FBQyxFQUFFLEdBQUcsQ0FBK0IsQ0FBQzs7QUFFM0YsWUFBTSxDQUFDLE9BQU8sR0FBRyxHQUFHLENBQUMiLCJmaWxlIjoic2VydmVyLW5vZGUvYXBwLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbi8vXG4vLyAgRGVwZW5kZW5jaWVzXG4vL1xuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxubGV0IGV4cHJlc3MgPSByZXF1aXJlKCdleHByZXNzJyk7XG5sZXQgcGF0aCA9IHJlcXVpcmUoJ3BhdGgnKTtcbmxldCBmYXZpY29uID0gcmVxdWlyZSgnc2VydmUtZmF2aWNvbicpO1xubGV0IGxvZ2dlciA9IHJlcXVpcmUoJ21vcmdhbicpO1xubGV0IHNlc3Npb24gPSByZXF1aXJlKFwiZXhwcmVzcy1zZXNzaW9uXCIpO1xubGV0IGNvb2tpZVBhcnNlciA9IHJlcXVpcmUoJ2Nvb2tpZS1wYXJzZXInKTtcbmxldCBib2R5UGFyc2VyID0gcmVxdWlyZSgnYm9keS1wYXJzZXInKTtcblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy9cbi8vICBDb25zdGFudHNcbi8vXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5jb25zdCBDTElFTlRfUEFUSCA9IHBhdGguam9pbihfX2Rpcm5hbWUsIFwiLi5cIiwgXCJjbGllbnRcIik7XG5jb25zdCBWSUVXX1BBVEggPSBwYXRoLmpvaW4oX19kaXJuYW1lLCBcInZpZXdzXCIpO1xuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vL1xuLy8gIENvbmZpZ3VyYXRpb25cbi8vXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vLyAgRGF0YWJhc2Vcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbi8vVE9ETzogUHJvdmlkZSBhbiBvcGluaW9uIGZvciBkYXRhYmFzZSBvcHRpb25zXG4vL3JlcXVpcmUoXCIuL2NvbmZpZy9bZGF0YWJhc2VdXCIpKFtjbGllbnRdKTtcblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy8gIEF1dGhlbnRpY2F0aW9uXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vL1RPRE86IFByb3ZpZGUgYW4gb3BpbmlvbiBmb3IgYW4gYXV0aGVudGljYXRpb24gc3RyYXRlZ3lcbi8vcmVxdWlyZShcIi4vY29uZmlnL1thdXRoZW50aWNhdG9yfHBhc3Nwb3J0XV1cIikoW21vZHVsZV0pO1xuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vLyAgQXBwbGljYXRpb25cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbmxldCBhcHAgPSBleHByZXNzKCk7XG5cbi8qKlxuICogSFRNTCB0ZW1wbGF0aW5nIGVuZ2luZVxuICovXG5hcHAuc2V0KCd2aWV3cycsIFZJRVdfUEFUSCk7XG5hcHAuc2V0KCd2aWV3IGVuZ2luZScsICdoYnMnKTtcbi8vYXBwLnVzZShmYXZpY29uKHBhdGguam9pbihDTElFTlRfUEFUSCwgJ2Zhdmljb24uaWNvJykpKTtcblxuLyoqXG4gKiBTZXJ2ZXIgSFRUUCBsb2dnaW5nXG4gKi9cbmxvZ2dlci50b2tlbihcInVzZXItaW5mb1wiLCByZXF1ZXN0ID0+IHtcbiAgICAvL1RPRE86IEFkZGl0aW9uYWwgdXNlciBpZGVudGlmaWVyIGZvciBpbmNvbWluZyByZXF1ZXN0c1xuICAgIGlmICggIXJlcXVlc3QudXNlciApIHJldHVybiBcIltBbm9ueW1vdXNdIC0gXCI7XG4gICAgcmV0dXJuIGAke3JlcXVlc3QudXNlci5uYW1lfSAtICR7cmVxdWVzdC51c2VyLmVtYWlsfSAtIGA7XG59KTtcbi8vTW9yZ2FuIFwiY29tYmluZWRcIiArIHByZWZpeGVkIGN1c3RvbSB1c2VyIGluZm8gdG9rZW5cbmFwcC51c2UobG9nZ2VyKCc6dXNlci1pbmZvIDpyZW1vdGUtYWRkciAtIDpyZW1vdGUtdXNlciBbOmRhdGVbY2xmXV0gXCI6bWV0aG9kIDp1cmwgSFRUUC86aHR0cC12ZXJzaW9uXCIgOnN0YXR1cyA6cmVzW2NvbnRlbnQtbGVuZ3RoXSBcIjpyZWZlcnJlclwiIFwiOnVzZXItYWdlbnRcIicpKTtcbi8vYXBwLnVzZShsb2dnZXIoXCJjb21iaW5lZFwiKSk7XG5cbi8qKlxuICogSFRNTCBmb3JtIGhlbHBlclxuICovXG5hcHAudXNlKGJvZHlQYXJzZXIuanNvbigpKTtcbmFwcC51c2UoYm9keVBhcnNlci51cmxlbmNvZGVkKHsgZXh0ZW5kZWQ6IGZhbHNlIH0pKTtcblxuLyoqXG4gKiBFbmFibGVzIHJlYWRpbmcgY29va2llcyBvdXQgb2YgYSBoZWFkZXJcbiAqL1xuYXBwLnVzZShjb29raWVQYXJzZXIoKSk7XG5cbi8qKlxuICogUGVyc2lzdGVudCBzZXNzaW9ucyBbd2l0aCBhdXRoZW50aWNhdGlvbl1cbiAqL1xuLy9UT0RPOiBEZWZhdWx0IHNlc3Npb24gc3RvcmFnZSwgTWVtb3J5U3RvcmUsIGlzIG5vdCBkZXNpZ25lZCBmb3IgcHJvZHVjdGlvbiAoaHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvZXhwcmVzcy1zZXNzaW9uI2NvbXBhdGlibGUtc2Vzc2lvbi1zdG9yZXMpXG5hcHAudXNlKHNlc3Npb24oe1xuICAgIHNlY3JldDogXCJbeW91ci1zZWNyZXQtaGVyZV1cIlxuICAgIC8vVE9ETzogWW91IHdpbGwgZ2V0IGFuIGV4cHJlc3Mtc2Vzc2lvbiBkZXByZWNhdGVkIHdhcm5pbmcgd2l0aG91dCBzcGVjaWZ5aW5nIHRoZSByZXNhdmUgb3B0aW9uLiBZb3VyIHJlc3BvbnNlIHdpbGwgZGVwZW5kIG9uIHlvdXIgc2Vzc2lvbiBzdG9yYWdlIHNlbGVjdGlvbi4gKGh0dHBzOi8vd3d3Lm5wbWpzLmNvbS9wYWNrYWdlL2V4cHJlc3Mtc2Vzc2lvbiNyZXNhdmUpXG4gICAgLy9yZXNhdmU6IHRydWUsXG4gICAgLy9UT0RPOiBZb3Ugd2lsbCBnZXQgYW4gZXhwcmVzcy1zZXNzaW9uIGRlcHJlY2F0ZWQgd2FybmluZyB3aXRob3V0IHNwZWNpZnlpbmcgc2F2ZVVuaW5pdGlhbGl6ZWQgb3B0aW9uLiAoaHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvZXhwcmVzcy1zZXNzaW9uI3NhdmV1bmluaXRpYWxpemVkKVxuICAgIC8vc2F2ZVVuaW5pdGlhbGl6ZWQ6IHRydWVcbn0pKTtcbi8vYXBwLnVzZShbYXV0aGVudGljYXRvcnxwYXNzcG9ydF0uaW5pdGlhbGl6ZSgpKTtcbi8vYXBwLnVzZShbYXV0aGVudGljYXRvcnxwYXNzcG9ydF0uc2Vzc2lvbigpKTtcblxuLyoqXG4gKiBTZXJ2ZXIgcm91dGUgZGVmaW5pdGlvbnMsIG9wdGlvbmFsbHkgcGFzc2luZyBbYXV0aGVudGljYXRvcnxwYXNzcG9ydF0gZm9yIHByb3RlY3RlZCByb3V0ZXNcbiAqL1xucmVxdWlyZShcIi4vY29uZmlnL3JvdXRlc1wiKShleHByZXNzLnN0YXRpYyhDTElFTlRfUEFUSCksIGFwcC8qLCBbYXV0aGVudGljYXRvcnxwYXNzcG9ydF0qLyk7XG5cbm1vZHVsZS5leHBvcnRzID0gYXBwO1xuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9
